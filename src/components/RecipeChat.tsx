import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { ChefHat, Sparkles, Clock, Users } from "lucide-react";
import risottoImage from "@/assets/risotto-example.jpg";
import { Badge } from "@/components/ui/badge";

export const RecipeChat = () => {
  const [userInput, setUserInput] = useState("");
  type Recipe = {
    title: string;
    subtitle: string;
    image: string;
    prepTime: string;
    servings: string;
    difficulty: string;
    ingredients: string[];
    instructions: { title: string; content: string }[];
    tip: string;
    pairing: string;
    diets?: string[];
  } | null;
  const [recipe, setRecipe] = useState<Recipe>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleGenerateRecipe = async () => {
    if (!userInput.trim()) return;
    
    setIsLoading(true);
    
    try {
      // Envia o input do usuário para o webhook do n8n
      const webhookUrl = "https://leonardomerlo.app.n8n.cloud/webhook/e4b612dd-a4a9-4f96-8a62-afaa9edad42e";
      const response = await fetch(webhookUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ userInput })
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro do webhook: ${response.status} - ${errorText}`);
      }

      // Tenta ler JSON do fluxo n8n → Spoonacular
      const data = await response.json().catch(async () => {
        const text = await response.text();
        console.debug("Resposta do n8n (texto):", text);
        return null;
      });

      // Mapear possíveis formatos vindos do n8n/Spoonacular
      // Esperados: title, readyInMinutes, servings, image,
      // extendedIngredients[].original OR ingredients[],
      // analyzedInstructions[0].steps[].step OR instructions (string)
      const spoonacular = Array.isArray(data) ? data[0] : data; // caso o n8n retorne em array

      const title: string = spoonacular?.title ?? "Receita sugerida";
      const readyInMinutes: number | string | undefined = spoonacular?.readyInMinutes;
      const servingsRaw: number | string | undefined = spoonacular?.servings;
      const image: string = spoonacular?.image ?? risottoImage;

      // Ingredientes
      const ingredientsFromExtended: string[] = spoonacular?.extendedIngredients?.map((ing: { name?: string; amount?: number | string; unit?: string; original?: string; originalString?: string }) => {
        // Prioriza name + amount (e unit, se houver), senão cai em original
        const name = ing.name?.toString().trim();
        const amount = ing.amount !== undefined && ing.amount !== null ? String(ing.amount) : "";
        const unit = ing.unit ? String(ing.unit) : "";
        const formatted = [amount, unit, name].filter(Boolean).join(" ").trim();
        return formatted || ing.original || ing.originalString;
      }).filter(Boolean) ?? [];
      const ingredientsFallback: string[] = spoonacular?.ingredients ?? [];
      const ingredients: string[] = (ingredientsFromExtended.length ? ingredientsFromExtended : ingredientsFallback) as string[];

      // Instruções
      let steps: { title: string; content: string }[] = [];
      const analyzed = spoonacular?.analyzedInstructions?.[0]?.steps ?? [];
      if (Array.isArray(analyzed) && analyzed.length) {
        steps = analyzed.map((s: { number?: number; step?: string }, idx: number) => ({
          title: `Step ${s.number ?? idx + 1}:`,
          content: String(s.step ?? "").trim()
        })).filter(s => s.content);
      } else if (spoonacular?.instructions && typeof spoonacular.instructions === "string") {
        const parts = String(spoonacular.instructions)
          .split(/\.(?!\d)/)
          .map((p: string) => p.trim())
          .filter(Boolean);
        steps = parts.map((p: string, idx: number) => ({ title: `Passo ${idx + 1}:`, content: p + "." }));
      }

      const diets: string[] = Array.isArray(spoonacular?.diets) ? spoonacular.diets : [];

      // Dificuldade heurística simples baseada no tempo
      const minutesNum = typeof readyInMinutes === "number" ? readyInMinutes : parseInt(String(readyInMinutes ?? "0"), 10);
      const difficulty = isNaN(minutesNum)
        ? "—"
        : minutesNum <= 20
          ? "Easy"
          : minutesNum <= 40
            ? "Medium"
            : "Hard";

      const mappedRecipe = {
        title,
        subtitle: "Recipe generated by  IA",
        image,
        prepTime: readyInMinutes ? `${readyInMinutes} minutes` : "—",
        servings: servingsRaw ? `${servingsRaw} people` : "—",
        difficulty,
        ingredients: ingredients.length ? ingredients : ["Ingredientes não informados."],
        instructions: steps.length ? steps : [{ title: "Instruções:", content: "Não foram fornecidas instruções detalhadas." }],
        tip: "Dica: ajuste o sal no final e prove antes de servir.",
        pairing: "Sugestão: sirva com salada ou legumes grelhados.",
        diets
      } as const;

      setRecipe(mappedRecipe);
    } catch (error) {
      console.error("Erro ao gerar receita:", error);
      // Reset to null on error
      setRecipe(null);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-8">
      {/* Input Section */}
      <Card className="overflow-hidden">
        <CardContent className="p-8">
          <div className="space-y-6">
            <div className="text-center space-y-3">
              <div className="flex items-center justify-center gap-2 text-primary">
                <Sparkles className="w-6 h-6" />
                <h2 className="text-2xl font-bold">What would you like to eat today?</h2>
              </div>
              <p className="text-muted-foreground max-w-2xl mx-auto">
              Describe your ingredients, preferences, or simply what you’re craving. Our virtual chef will create a personalized recipe for you!
              </p>
            </div>
            
            <div className="space-y-4">
              <Textarea
                placeholder="Ex: I have chicken, broccoli, and cheese. I want something healthy for dinner..."
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                className="min-h-[140px] text-base"
              />
              
              <div className="flex justify-center">
                <Button
                  onClick={handleGenerateRecipe}
                  disabled={!userInput.trim() || isLoading}
                  variant="chef"
                  size="lg"
                  className="px-8 py-3 text-lg"
                >
                  {isLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent" />
                      Generating your recipe...
                    </>
                  ) : (
                    <>
                      <ChefHat className="w-5 h-5" />
                      Generate Recipe
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Recipe Display */}
      {recipe && (
        <Card className="overflow-hidden">
          <CardContent className="p-0">
            {/* Recipe Image */}
            <div className="w-full h-96 overflow-hidden">
              <img 
                src={recipe.image} 
                alt={recipe.title}
                className="w-full h-full object-contain"
              />
            </div>
            
            <div className="p-8 space-y-6">
              <div className="flex items-center gap-3 pb-4 border-b border-border">
                <div className="p-2 bg-primary/10 rounded-lg">
                  <ChefHat className="w-6 h-6 text-primary" />
                </div>
                <div>
                  <h3 className="text-xl font-bold">Your Personalized Recipe</h3>
                  <p className="text-sm text-muted-foreground">Created especially for you</p>
                </div>
              </div>
              
              {/* Recipe Content */}
              <div className="space-y-6">
                <div>
                  <h2 className="text-2xl font-bold text-foreground mb-2">{recipe.title}</h2>
                </div>
                
                <div className="grid grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg">
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Time</p>
                    <p className="font-bold">{recipe.prepTime}</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Servings</p>
                    <p className="font-bold">{recipe.servings}</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Difficulty</p>
                    <p className="font-bold">{recipe.difficulty}</p>
                  </div>
                </div>

                {recipe.diets && recipe.diets.length > 0 && (
                  <div className="flex flex-wrap gap-2">
                    {recipe.diets.map((diet, idx) => (
                      <Badge key={idx} variant="secondary">{diet}</Badge>
                    ))}
                  </div>
                )}
                
                <div>
                  <h3 className="text-xl font-bold mb-3">Ingredients:</h3>
                  <ul className="space-y-1">
                    {recipe.ingredients.map((ingredient, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <span className="text-primary font-medium">•</span>
                        <span>{ingredient}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div>
                  <h3 className="text-xl font-bold mb-3">Instructions:</h3>
                  <ol className="space-y-3">
                    {recipe.instructions.map((step, index) => (
                      <li key={index} className="flex gap-3">
                        <span className="bg-primary text-primary-foreground rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mt-0.5 flex-shrink-0">
                          {index + 1}
                        </span>
                        <div>
                          <span className="font-bold">{step.title}</span> {step.content}
                        </div>
                      </li>
                    ))}
                  </ol>
                </div>
                
                
              </div>
              
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};